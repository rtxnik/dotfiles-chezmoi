#!/bin/bash

set -euo pipefail

# Конфигурация для iCloud
SOURCE_DIR="$HOME/Zettelkasten"
ICLOUD_BASE="$HOME/Library/Mobile Documents/com~apple~CloudDocs"
BACKUP_DIR="$ICLOUD_BASE/backup/Zettelkasten"
LOG_FILE="/tmp/zkbackup.log"

# Цвета для вывода
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

error() {
    log "${RED}ERROR: $*${NC}"
}

success() {
    log "${GREEN}✅ $*${NC}"
}

warning() {
    log "${YELLOW}⚠️  $*${NC}"
}

# Проверка доступности iCloud Drive
check_icloud_status() {
    if [[ ! -d "$ICLOUD_BASE" ]]; then
        error "iCloud Drive not found at $ICLOUD_BASE"
        error "Make sure iCloud Drive is enabled in System Preferences"
        return 1
    fi
    
    # Проверяем, что iCloud Drive активен (есть файл .com.apple.mobile_container_manager.metadata)
    if [[ ! -d "$ICLOUD_BASE/.Trash" ]]; then
        warning "iCloud Drive might not be fully initialized"
    fi
    
    success "iCloud Drive is available"
    return 0
}

# Проверка исходной директории
check_source() {
    if [[ ! -d "$SOURCE_DIR" ]]; then
        error "Source directory $SOURCE_DIR does not exist"
        return 1
    fi
    
    local note_count
    note_count=$(find "$SOURCE_DIR" -name "*.md" | wc -l | xargs)
    log "Found $note_count markdown files in Zettelkasten"
    
    return 0
}

# Создание структуры бекапа
create_backup_structure() {
    mkdir -p "$BACKUP_DIR"
    
    # Создаем .gitignore для исключения системных файлов iCloud
    cat > "$BACKUP_DIR/.gitignore" << 'EOF'
.DS_Store
*.icloud
.com.apple.timemachine.donotpresent
EOF
    
    success "Backup structure created"
}

# Проверка квоты iCloud (приблизительно)
check_icloud_space() {
    # Получаем размер исходной директории
    local source_size_mb
    source_size_mb=$(du -sm "$SOURCE_DIR" 2>/dev/null | cut -f1 || echo "0")
    
    # Получаем доступное место в iCloud (через df)
    local available_space_mb
    if available_space_mb=$(df -m "$ICLOUD_BASE" 2>/dev/null | tail -1 | awk '{print $4}'); then
        log "Source size: ${source_size_mb}MB, Available space: ${available_space_mb}MB"
        
        if (( source_size_mb > available_space_mb )); then
            error "Insufficient space in iCloud Drive"
            error "Required: ${source_size_mb}MB, Available: ${available_space_mb}MB"
            return 1
        fi
    else
        warning "Could not check available space, proceeding anyway"
    fi
    
    return 0
}

# Основная функция синхронизации
perform_sync() {
    log "Starting sync: $SOURCE_DIR -> $BACKUP_DIR"
    
    # Используем rsync с параметрами, оптимизированными для iCloud
    local rsync_opts=(
        -av                    # archive, verbose
        --delete              # удаляем файлы, которых нет в источнике
        --exclude=".DS_Store" # исключаем системные файлы macOS
        --exclude="*.tmp"     # исключаем временные файлы
        --exclude=".git"      # исключаем git, если есть
        --progress            # показываем прогресс
    )
    
    if rsync "${rsync_opts[@]}" "$SOURCE_DIR/" "$BACKUP_DIR/" 2>&1 | tee -a "$LOG_FILE"; then
        success "Sync completed successfully"
        return 0
    else
        error "Sync failed"
        return 1
    fi
}

# Инициализация git репозитория в бекапе (опционально)
setup_git_repo() {
    if [[ ! -d "$BACKUP_DIR/.git" ]]; then
        warning "Git repository not found in backup directory"
        read -p "Initialize git repository? (y/N): " -n 1 -r
        echo
        
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            cd "$BACKUP_DIR" || return 1
            git init
            git add .gitignore
            git commit -m "Initial commit with .gitignore"
            success "Git repository initialized"
        else
            log "Skipping git initialization"
            return 0
        fi
    fi
    
    return 0
}

# Git коммит изменений
commit_changes() {
    if [[ -d "$BACKUP_DIR/.git" ]]; then
        cd "$BACKUP_DIR" || {
            error "Cannot change to backup directory"
            return 1
        }
        
        git add -A
        
        if git diff --staged --quiet; then
            log "No changes to commit"
        else
            local commit_msg="Automatic backup $(date '+%Y-%m-%d %H:%M:%S')"
            git commit -m "$commit_msg"
            success "Changes committed to git"
            
            # Показываем статистику последнего коммита
            git --no-pager show --stat --oneline HEAD
        fi
    else
        log "No git repository, skipping commit"
    fi
}

# Проверка синхронизации iCloud (ждем загрузки)
wait_for_icloud_sync() {
    log "Waiting for iCloud sync to complete..."
    
    # Ищем файлы .icloud (placeholder файлы)
    local icloud_files
    icloud_files=$(find "$BACKUP_DIR" -name "*.icloud" 2>/dev/null | wc -l | xargs)
    
    if (( icloud_files > 0 )); then
        warning "Found $icloud_files .icloud placeholder files"
        warning "Some files are still syncing to iCloud"
        log "You can monitor sync status in Finder or with: brctl log --wait --shorten"
    else
        success "No pending iCloud uploads detected"
    fi
}

# Отображение статистики
show_stats() {
    local total_files
    local total_size
    
    total_files=$(find "$BACKUP_DIR" -type f | wc -l | xargs)
    total_size=$(du -sh "$BACKUP_DIR" | cut -f1)
    
    echo
    echo "=== Backup Statistics ==="
    echo "Location: $BACKUP_DIR"
    echo "Total files: $total_files"
    echo "Total size: $total_size"
    echo "Log file: $LOG_FILE"
    echo
}

# Главная функция
main() {
    log "=== iCloud Zettelkasten Backup Started ==="
    
    # Выполняем все проверки
    check_icloud_status || exit 1
    check_source || exit 1
    check_icloud_space || exit 1
    
    # Создаем структуру и выполняем синхронизацию
    create_backup_structure
    
    if perform_sync; then
        setup_git_repo
        commit_changes
        wait_for_icloud_sync
        show_stats
        success "=== iCloud Backup Completed Successfully ==="
    else
        error "=== iCloud Backup Failed ==="
        exit 1
    fi
}

# Обработка аргументов командной строки
case "${1:-backup}" in
    backup)
        main
        ;;
    status)
        if [[ -d "$BACKUP_DIR" ]]; then
            show_stats
            log "Last backup: $(ls -la "$BACKUP_DIR" | head -2 | tail -1 | awk '{print $6, $7, $8}')"
        else
            warning "No backup found at $BACKUP_DIR"
        fi
        ;;
    init)
        check_icloud_status
        create_backup_structure
        setup_git_repo
        success "Backup structure initialized"
        ;;
    *)
        echo "Usage: $0 [backup|status|init]"
        echo "  backup  - Perform backup to iCloud (default)"
        echo "  status  - Show backup status and statistics"
        echo "  init    - Initialize backup structure"
        exit 1
        ;;
esac
